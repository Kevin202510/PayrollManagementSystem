/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Payroll;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Midoriya Izuku
 */
public class MainEmployeeDashboard extends javax.swing.JFrame {

    /**
     * Creates new form MainEmployeeDashboard
     */
 
    
    public MainEmployeeDashboard() {
        initComponents();
        jTextField1.requestFocusInWindow();
        showAllLogs();
        jlbl_date.setText(getDateNow());
        new VideoFeeder().start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbl_emplogs = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jbtn_x = new javax.swing.JButton();
        jlbl_date = new javax.swing.JLabel();
        jlbl_time = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(248, 210, 160));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 8, true));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 38)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 153, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("HNR SHOPPING CENTER");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 30, -1, -1));

        jSeparator2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 1120, 10));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/cart-77-64.png"))); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 10, -1, 70));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/cart-78-64.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 70, 70));

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 110, 310, 50));

        jtbl_emplogs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "EMPLOYEE CODE", "FULLNAME", "TIME IN", "TIME OUT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtbl_emplogs);
        if (jtbl_emplogs.getColumnModel().getColumnCount() > 0) {
            jtbl_emplogs.getColumnModel().getColumn(0).setResizable(false);
            jtbl_emplogs.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 180, 1100, 490));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("DATE:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 60, 20));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setText("TIME:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 60, -1));

        jbtn_x.setBackground(new java.awt.Color(255, 102, 0));
        jbtn_x.setFont(new java.awt.Font("Rockwell Extra Bold", 0, 11)); // NOI18N
        jbtn_x.setForeground(new java.awt.Color(255, 255, 255));
        jbtn_x.setText("X");
        jbtn_x.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_xActionPerformed(evt);
            }
        });
        jPanel1.add(jbtn_x, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 10, -1, 20));

        jlbl_date.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jPanel1.add(jlbl_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 140, 20));

        jlbl_time.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jPanel1.add(jlbl_time, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, 140, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1143, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtn_xActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_xActionPerformed
        this.dispose();
        new Dashboard().setVisible(true);
    }//GEN-LAST:event_jbtn_xActionPerformed

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        if (evt.getKeyCode()==10) {
            checkEmployee(jTextField1.getText());
        }
    }//GEN-LAST:event_jTextField1KeyPressed
    double dow;
    public void checkEmployee(String empcode){
        sqlConnection getDB = new sqlConnection();
        Connection conn = getDB.DbconnectP();
        
        try {
            DefaultTableModel model = (DefaultTableModel)jtbl_emplogs.getModel();
            Object[] empTable = new Object[9];
            String getAllEmps = "SELECT * FROM `employees` where ID>1 AND EMP_BARCODE = '"+empcode+"'";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(getAllEmps);
            
            if(rs.next()){
               int id = rs.getInt("ID"); 
               dow=rs.getDouble("DAYS_OF_WORK");
               checkLogs(id);
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainEmployeeDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void showAllLogs(){
        sqlConnection getDB = new sqlConnection();
        Connection conn = getDB.DbconnectP();
        
        try {
            DefaultTableModel model = (DefaultTableModel)jtbl_emplogs.getModel();
            Object[] empTable = new Object[9];
            String getAllEmps = "SELECT * FROM `emplogs` LEFT JOIN employees ON employees.ID=emplogs.EMP_ID WHERE DATEIN = '"+getDateNow()+"' AND status = 1";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(getAllEmps);
            
            while(rs.next()){
              String fullname = rs.getString("FIRST_NAME") + " " + rs.getString("MIDDLE_NAME") + " " + rs.getString("LAST_NAME");
              empTable[0] = rs.getInt("EMPLOG_ID");
              empTable[1] = rs.getString("EMP_BARCODE");
              empTable[2] = fullname;
              empTable[3] = rs.getString("TIMEIN");
              empTable[4] = rs.getString("TIMEOUT");
              model.addRow(empTable);
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainEmployeeDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void checkLogs(int id){
        sqlConnection getDB = new sqlConnection();
        Connection conn = getDB.DbconnectP();
        
        try {
            String getAllEmps = "SELECT * FROM `emplogs` WHERE EMP_ID ='"+id+"' AND status=1";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(getAllEmps);
            
            if(rs.next()){
                if (hour>=18) {
                    JOptionPane.showMessageDialog(this,"OUT KANA");
                    int idd = rs.getInt("EMPLOG_ID");
                    updateEmployeeLogs(idd,id);
                    jTextField1.setText(""); 
                }else{
                    JOptionPane.showMessageDialog(this,"Your Already TimeIn");
                    jTextField1.setText(""); 
                }
            }else{
                checkLog(id);
//                    JOptionPane.showMessageDialog(this,"Hindi Pa");
//                    addLogs(id);
                }
        } catch (SQLException ex) {
            Logger.getLogger(MainEmployeeDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void checkLog(int id){
       sqlConnection getDB = new sqlConnection();
        Connection conn = getDB.DbconnectP();
        
        try {
            String getAllEmps = "SELECT * FROM `emplogs` WHERE EMP_ID ='"+id+"' AND status=0";
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(getAllEmps);
            if (rs.next()) {
            
            if (rs.getString("DATEIN").equals(getDateNow())) {
                JOptionPane.showMessageDialog(this,"Your Out");
            }else if(!rs.getString("DATEIN").equals(getDateNow())) {
                if (hour>=18) {
                    JOptionPane.showMessageDialog(this,"Store Closssssssse");
                    jTextField1.setText(""); 
                }else{
                    addLogs(id);
                }
            }
            }else{
                if (hour>=18) {
                    JOptionPane.showMessageDialog(this,"Store Close");
                    jTextField1.setText(""); 
                }else{
                    addLogs(id);
                }
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(MainEmployeeDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public String getTimeNow(){
         Date jlbl_time = Calendar.getInstance().getTime();  
        SimpleDateFormat emptimeinformat = new SimpleDateFormat("hh:mm:00 aa"); 
        String strTime = emptimeinformat.format(jlbl_time);
        return strTime;
     }
    
    public String getDateNow(){
         Date jlbl_date = Calendar.getInstance().getTime();  
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  
        String strDate = dateFormat.format(jlbl_date);
        return strDate;
     }
    
    public void addLogs(int id) throws SQLException{
        sqlConnection getDB = new sqlConnection();
        Connection conn = getDB.DbconnectP();
        String addPosition = "INSERT INTO `emplogs`(`EMP_ID`,`DATEIN`,`TIMEIN`) VALUES (?,?,?)";
        PreparedStatement st = conn.prepareStatement(addPosition);
            st.setInt(1, id);
            st.setString(2, getDateNow());
            st.setString(3, getTimeNow());
//            st.setString(4, getTimeNow());
            int i = st.executeUpdate();
           if (i > 0) {
                JOptionPane.showMessageDialog(this,"Successfully Added");
                DefaultTableModel model = (DefaultTableModel)jtbl_emplogs.getModel();
                Object[] empTable = new Object[9];
                model.setRowCount(0);
                showAllLogs();
                jTextField1.setText(""); 
                 
          } else {
                JOptionPane.showMessageDialog(this,"Error");
            }
    }
    
    public void updateEmployeeLogs(int id,int idds){
        try {
            sqlConnection getDB = new sqlConnection();
            Connection conn = getDB.DbconnectP();
            String addPosition = "UPDATE emplogs SET `TIMEOUT` = ?,status=0 where EMPLOG_ID=?";
            PreparedStatement st = conn.prepareStatement(addPosition);
            st.setString(1,getTimeNow());
            st.setInt(2,id);
            int i = st.executeUpdate();
            if (i > 0) {
                String addPositions = "UPDATE employees SET `DAYS_OF_WORK` = ? where ID=?";
                PreparedStatement sts = conn.prepareStatement(addPositions);
                sts.setDouble(1,dow+1);
                sts.setInt(2,idds);
                sts.executeUpdate();
                JOptionPane.showMessageDialog(this,"Successfully Updated");
                DefaultTableModel model = (DefaultTableModel)jtbl_emplogs.getModel();
                Object[] empTable = new Object[9];
                model.setRowCount(0);
                showAllLogs();
                jTextField1.setText("");
                
            } else {
                JOptionPane.showMessageDialog(this,"Error");
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainEmployeeDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
//    String fullname = rs.getString("FIRST_NAME") + " " + rs.getString("MIDDLE_NAME") + " " + rs.getString("LAST_NAME");
//                empTable[0] = rs.getString("EMP_BARCODE");
//                empTable[1] = fullname;
//                empTable[2] = rs.getString("ADDRESS");
//                empTable[3] = rs.getString("DOB");
//               
//                model.addRow(empTable);
    /**
     * @param args the command line arguments
     */
          
          
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainEmployeeDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainEmployeeDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainEmployeeDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainEmployeeDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainEmployeeDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton jbtn_x;
    private javax.swing.JLabel jlbl_date;
    private javax.swing.JLabel jlbl_time;
    private javax.swing.JTable jtbl_emplogs;
    // End of variables declaration//GEN-END:variables
    
    String time;
    int hour;
    
    class VideoFeeder extends Thread {
    
          public void run(){
                  
                  String ss = "00";
                  
                  while(true){
//                      try {
                          Calendar cal = Calendar.getInstance();
                          SimpleDateFormat kevs = new SimpleDateFormat("hh:mm:ss aa");
                          Date dat = cal.getTime();
                          String timess = kevs.format(dat);
                          hour = cal.get(Calendar.HOUR_OF_DAY);
                          time=timess;
                          jlbl_time.setText(time);
          
          }
          }
    }

}
